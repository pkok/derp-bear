#!/usr/bin/env python
import cPickle

import tree_parser

PICKLE_SUFFIX = os.path.extsep + "pkl"
PCFG_FN = "pcfg" + PICKLE_SUFFIX
TRAIN_TREES_FN = "train_trees" + PICKLE_SUFFIX

def step1(train_file):
    """Returns the PCFG grammar generated by the train_file's syntax trees.

    It will first look for pickled versions of the grammar, as the computation
    can take some time.
    """
    if os.path.exists(PCFG_FN):
        return cPickle.load(open(PCFG_FN))

    if os.path.exists(TRAIN_TREES_FN):
        train_trees = cPickle.load(open(TRAIN_TREES_FN))
    else:
        print "Interpreting each training tree..."
        train_trees = [get_tree(line) for line in open(train_file)]
        cPickle.dump(train_trees, open(TRAIN_TREES_FN, 'w'))
    print "Extracting rules from the parse trees..."
    pcfg = extract_rules(forest)
    cPickle.dump(pcfg, open(PCFG_FN, 'w'))
    return pcfg

def main():
    """Main method, doing all steps of the project after each other."""
    step1("../wsj.02-21.training(1).nounary")

if __name__ == "__main__":
    main();
